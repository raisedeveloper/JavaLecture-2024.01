***********************문제풀이 알람alralm************************

45분을 넘는지 안넘는지 보면됨
분이 45분 보다 넘으면 -45분을 해준다

***********************문제풀이 다이스dice************************

일반적인 프로그램 랭귀지에서는 틀릴염려가 없다 (다이스1 == 다이스 2 && 다이스2 == 다이스3)


배열 : 여러개의 자료를 한꺼번에 다룰 수 있는 자료형
	대괄호 [ ] 안에 들어가면 됨
	array? javascript C의 array? 다르다 python의 list 같은 느낌
	java나 C는 데이터 타입이 동일 javascript는 데이터 타입이 상이
	datatype
	arrange?
 	한번만들면 크기가 늘어날 수 있다. 자바나 C는 크기 늘어날 수 없음
	
	여러 자료형이 섞여 있을 수 있음
	여러개의 데이터를 한 줄에 쓰는 형태

	console.log(person[0], person[1], person[person.length-1]); 자바나 C는 이렇게 씀

	object = (key1: value1, key2: value2, ...}
	
	arr = {0: val1, 1:val2, ///} ==> [val1, val2, ...]

//배열(Array)
let person = ['James' , 27, '남자', '프로그래머', 175.3]; //스트링 넘버 관계없이 들어감
console.log(person);
console.log(typeof person);     //object, array는 object의 한 형태
console.log(person.length);
console.log(person[0], person[1], person[person.length-1]);

// 배열을 효율적으로 사용하려면 반복문을 사용해야 함
// while 반복문 - 횟수가 정해지지 않은 경우 씀 
// for - 횟수가 정해져 있을 경우 씀
for(let i=0, i < person.length; i++) {  
    console.log(person[i]);
} 
//외울 것 : 시작값; 조건이 참인 동안 반복; 다음번 반복시 변화시킬 값 
// 시작하는 인덱스는 0, for는 사용할 횟수의 초기값을 씀

배열을 잘쓰고 못쓰고에 따라서 프로와 초보 프로그래머가 갈린다
프로그램의 로직이 복잡해질수록 자료구조가 복잡해진 수준을 다뤄야 프로가 될 수 있다











*************************2.while 반복문******************************

조건이 참이면 문장을 실행함


횟수가 정해지지 않을 때 사용하는 것이 while.

21번 이후에 빠져나갈수있다면

몇번을 돌려서 4번만에 빠져나갈 수도 있지만

10번을 시도해도 못빠져 나갈 수 있다

그럴 때 while 사용








// while 반복문
let person = ['James' , 27, '남자', '프로그래머', 175.3];

let i=0;
while (i < person.length) {
    console.log(person[i]);
    i++;                        //while은 이렇게 써야함 (배열이랑 다름)
}

let sum = 0;
while (sum <= 21) {
    let dice = Math.ceil(Math.random()*6);
    console.log(dice);
    /*sum += dice;*/        //루프과금!!!! 조건을 변화시키는 실행문이 없으면 무한 루프에 빠짐, 탈출하려면 ctrl+c
}
console.log(sum);



**************for 반복문을 가장 많이 사용한다*************************

1에서 1000까지 전부 합하기

//for - 반복문
//1에서 1000까지 합 구하기
let sum = 0;
for(let i = 1; i <= 1000; i++) {
    sum +=i; //sum에다 i값을 더해준다
}
console.log(`1에서 1000까지 합은 ${sum}`);

잠자다 깨서도 쭉! 쓸 수 있을 정도로 완! 전! 히! 외워야한다!!!!!!!****************************************************************



03.for.js

나의 답

let oddsum = 0;
for(let i = 1; i <= 1000; i++) {
    sum +2==i;
}
console.log(`1에서 1000가지 홀수의 합은 ${sum}`);

강사님 답

let oddsum = 0;
for(let i = 1; i <= 1000; i+= 2) {
    oddsum += i;
}
console.log(`1에서 1000까지 홀수의 합은 ${oddsum}`);

//1에서 100까지 짝수의 합
let evenSum = 0;
for(let i = 2; i <= 1000; i += 2) {
    evenSum += i;
}

1에서 100까지 짝수의 합
console.log(`1에서 100까지 짝수의 합은 ${evenSum}`);

//1에서 10까지 곱 구하기
let product = 1;
for(let i = 1; i <= 10; i ++) {
    product *= i;
}
console.log(`1에서 10까지 곱은 ${product}`);

ctrl+D 여러개 같은 단어 선택***********************************************************************************




************************04. 중첩 반복문*************************
//1. 별 다섯개를 다섯줄 그리기

for (let i = 0; i < 5; i++) {      // 다섯줄 
    let star = '';             // 초기화 _ 빈 문자열 만들어주기 '';
    for (let k = 0; k < 5; k++) { // 별 다섯개   
    star += '*';
}
console.log(star);
}


cmd결과

C:\workspace\WebProject\03.javascript\ch04.반복문>node 04.중첩for.js
*****
*****
*****
*****
*****




<star문제 2>
한줄 마다 *이 하나씩 늘어나는 형태

	i	k		i	k
*
**
***
****	0	i+1		1	i
	1	i+1		2	i
	2	i+1		3	i	
	3	i+1		4	i
	4	i+1		5	i

4사분면
*
**
***
****

for (let i = 5; i < 0;--) {      // 다섯줄  i가 5 이하일때까지; i를 추가시켜라 --> (i++)
    let star = '';             // 초기화 _ 빈 문자열 만들어주기 '';
    for (let k = 0; k < i; k++) { // 별 다섯개   
    star += '*';
}
console.log(star);
}


for문 100번 하기! : 미세한 부분으로 프로그래밍을 잘한다 못한다가 갈린다!

(2사분면)
	i	공백	별
    *	0	4	1
   **	0	3	2
  ***	2	2	3	
 ****	3	1	4
*****	4	0	5

for (let i = 0; i < 5; i++) {      // 다섯줄  i가 5 이하일때까지; i를 추가시켜라 --> (i++)
    let star = '';             // 초기화 _ 빈 문자열 만들어주기 '';
    for (let k = 0; k < i; k++) { // 별 다섯개   
    star += '*';
}
console.log(star);
}

(3사분면)

*****	0	0	5	
****	1	1	4
***	2	2	3
**	3	3	2	
*	4	4	1
		i	5 - i





7		i	공백	별
     *		0	3	1
    ***		1	2	3	
   *****	2	1	5	
  *******	3	0	7
   *****	2	1	5
    *** 	1	2	3
     *		0	3	1
			3 - i	2 * i + 1


doc document object 



modulo를 이용해서 약수 구하기














